import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -v -qapp MellowPlayer 3.0 /home/maddy/git/MellowPlayer/cmake-build-debug/src/lib/presentation/qml'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "MellowPlayer::Domain::CurrentPlayer"
        prototype: "MellowPlayer::Domain::IPlayer"
        exports: ["CurrentPlayer 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "active"; type: "bool"; isReadonly: true }
        Method { name: "isActive"; type: "bool" }
        Method { name: "togglePlayPause" }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "next" }
        Method { name: "previous" }
        Method {
            name: "seekToPosition"
            Parameter { name: "position"; type: "double" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method { name: "toggleFavoriteSong" }
        Method { name: "addToFavorites" }
        Method { name: "removeFromFavorites" }
    }
    Component {
        name: "MellowPlayer::Domain::IPlayer"
        prototype: "QObject"
        Property { name: "currentSong"; type: "Song"; isReadonly: true; isPointer: true }
        Property { name: "position"; type: "double"; isReadonly: true }
        Property { name: "playbackStatus"; type: "PlaybackStatus"; isReadonly: true }
        Property { name: "canSeek"; type: "bool"; isReadonly: true }
        Property { name: "canGoNext"; type: "bool"; isReadonly: true }
        Property { name: "canGoPrevious"; type: "bool"; isReadonly: true }
        Property { name: "canAddToFavorites"; type: "bool"; isReadonly: true }
        Property { name: "volume"; type: "int"; isReadonly: true }
        Property { name: "serviceName"; type: "string"; isReadonly: true }
        Property { name: "isPlaying"; type: "bool"; isReadonly: true }
        Property { name: "isStopped"; type: "bool"; isReadonly: true }
        Signal {
            name: "currentSongChanged"
            Parameter { name: "song"; type: "Song"; isPointer: true }
        }
    }
    Component {
        name: "MellowPlayer::Domain::IPlayerBase"
        prototype: "MellowPlayer::Domain::IPlayer"
        exports: ["IPlayerBase 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal { name: "play" }
        Signal { name: "pause" }
        Signal { name: "next" }
        Signal { name: "previous" }
        Signal { name: "addToFavorites" }
        Signal { name: "removeFromFavorites" }
        Signal {
            name: "seekToPositionRequest"
            Parameter { name: "newPosition"; type: "double" }
        }
        Signal {
            name: "changeVolumeRequest"
            Parameter { name: "newVolume"; type: "double" }
        }
        Method {
            name: "setUpdateResults"
            Parameter { name: "results"; type: "QVariant" }
        }
    }
    Component {
        name: "MellowPlayer::Domain::SettingKey"
        prototype: "QObject"
        exports: ["SettingKey 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Keys"
            values: {
                "ADBLOCK_ENABLED": 0,
                "APPEARANCE_ACCENT": 1,
                "APPEARANCE_AUTO_HIDPI_SCALING": 2,
                "APPEARANCE_BACKGROUND": 3,
                "APPEARANCE_CUSTOM_TRAY_ICON": 4,
                "APPEARANCE_FOREGROUND": 5,
                "APPEARANCE_HIDPI_SCALING_FACTOR": 6,
                "APPEARANCE_PLAYER_CONTROLS_VISIBLE": 7,
                "APPEARANCE_PRIMARY_BACKGROUND": 8,
                "APPEARANCE_PRIMARY_FOREGROUND": 9,
                "APPEARANCE_SECONDARY_BACKGROUND": 10,
                "APPEARANCE_SECONDARY_FOREGROUND": 11,
                "APPEARANCE_SHOW_SCROLLBARS": 12,
                "APPEARANCE_SHOW_TRAY_ICON": 13,
                "APPEARANCE_THEME": 14,
                "APPEARANCE_TOOLBAR_VISIBLE": 15,
                "APPEARANCE_WEBPAGE_CONTROLS_VISIBLE": 16,
                "MAIN_CHECK_FOR_UPDATES": 17,
                "MAIN_CLOSE_TO_TRAY": 18,
                "MAIN_CONFIRM_EXIT": 19,
                "MAIN_PLAYBACK_REQUIRES_USER_GESTURE": 20,
                "MAIN_UPDATE_CHANNEL": 21,
                "NOTIFICATIONS_ENABLED": 22,
                "NOTIFICATIONS_NEW_SONG": 23,
                "NOTIFICATIONS_PAUSED": 24,
                "NOTIFICATIONS_RESUMED": 25,
                "PRIVACY_ENABLE_LISTENING_HISTORY": 26,
                "PRIVACY_LISTENING_HISTORY_LIMIT": 27,
                "PRIVACY_USER_AGENT": 28,
                "PRIVATE_CURRENT_SERVICE": 29,
                "PRIVATE_REMOTE_CONTROL_AUTO_START": 30,
                "PRIVATE_REMOTE_CONTROL_ENABLED": 31,
                "PRIVATE_SHOW_CLOSE_TO_TRAY_MESSAGE": 32,
                "PRIVATE_SHOW_FAVORITE_SERVICES": 33,
                "PRIVATE_WINDOW_HEIGHT": 34,
                "PRIVATE_WINDOW_WIDTH": 35,
                "SHORTCUTS_ABOUT": 36,
                "SHORTCUTS_CHECK_FOR_UPDATE": 37,
                "SHORTCUTS_CREATE_PLUGIN": 38,
                "SHORTCUTS_FAVORITE": 39,
                "SHORTCUTS_LISTENING_HISTORY": 40,
                "SHORTCUTS_NEXT": 41,
                "SHORTCUTS_NOTIFICATIONS": 42,
                "SHORTCUTS_PLAY": 43,
                "SHORTCUTS_PREVIOUS": 44,
                "SHORTCUTS_QUIT": 45,
                "SHORTCUTS_RELOAD": 46,
                "SHORTCUTS_REPORT_ISSUE": 47,
                "SHORTCUTS_RESTORE_WINDOW": 48,
                "SHORTCUTS_SELECT_NEXT_SERVICE": 49,
                "SHORTCUTS_SELECT_PREVIOUS_SERVICE": 50,
                "SHORTCUTS_SELECT_SERVICE": 51,
                "SHORTCUTS_SETTINGS": 52,
                "SHORTCUTS_SHOW_DEVTOOLS": 53,
                "SHORTCUTS_SHOW_TOOLBAR": 54
            }
        }
    }
    Component {
        name: "MellowPlayer::Domain::Song"
        prototype: "QObject"
        exports: ["Song 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "uniqueId"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "artist"; type: "string"; isReadonly: true }
        Property { name: "album"; type: "string"; isReadonly: true }
        Property { name: "artUrl"; type: "string"; isReadonly: true }
        Property { name: "duration"; type: "double"; isReadonly: true }
        Property { name: "isFavorite"; type: "bool"; isReadonly: true }
        Method { name: "isValid"; type: "bool" }
    }
    Component {
        name: "MellowPlayer::Infrastructure::NetworkProxy"
        prototype: "QObject"
        exports: ["NetworkProxy 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "hostName"; type: "string" }
        Property { name: "port"; type: "int" }
        Signal { name: "changed" }
    }
    Component {
        name: "MellowPlayer::Presentation::ApplicationViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["ApplicationViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "buildInfo"; type: "string"; isReadonly: true }
        Method { name: "quit" }
        Method { name: "restart" }
        Method { name: "showLogs" }
        Method { name: "clearCache" }
        Method { name: "clearCookies" }
    }
    Component {
        name: "MellowPlayer::Presentation::ClipBoardViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["ClipBoardViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "copiedText"; type: "string"; isReadonly: true }
        Method {
            name: "setText"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "canPaste"; type: "bool" }
    }
    Component {
        name: "MellowPlayer::Presentation::ColorSettingViewModel"
        prototype: "MellowPlayer::Presentation::SettingViewModel"
        exports: ["ColorSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "MellowPlayer::Presentation::DevToolsWindowViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["DevToolsWindowViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal { name: "show" }
    }
    Component {
        name: "MellowPlayer::Presentation::EnumSettingViewModel"
        prototype: "MellowPlayer::Presentation::SettingViewModel"
        exports: ["EnumSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "values"; type: "QStringList"; isReadonly: true }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "value"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::IMainWindow"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["IMainWindow 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal { name: "forceQuitRequest" }
    }
    Component {
        name: "MellowPlayer::Presentation::IStreamingServiceViewModel"
        prototype: "QObject"
        exports: ["StreamingServiceViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "logo"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "player"; type: "IPlayerBase"; isReadonly: true; isPointer: true }
        Property { name: "url"; type: "string" }
        Property { name: "version"; type: "string"; isReadonly: true }
        Property { name: "authorName"; type: "string"; isReadonly: true }
        Property { name: "authorWebsite"; type: "string"; isReadonly: true }
        Property { name: "sortIndex"; type: "int" }
        Property { name: "userScripts"; type: "IUserScriptsViewModel"; isReadonly: true; isPointer: true }
        Property { name: "zoomFactor"; type: "int" }
        Property { name: "notificationsEnabled"; type: "bool" }
        Property { name: "isActive"; type: "bool" }
        Property { name: "previewImageUrl"; type: "string" }
        Property { name: "sourceCode"; type: "string"; isReadonly: true }
        Property {
            name: "settings"
            type: "SettingsCategoryViewModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "broken"; type: "bool" }
        Property { name: "hasKnownIssues"; type: "bool"; isReadonly: true }
        Property { name: "favorite"; type: "bool" }
        Property { name: "networkProxy"; type: "NetworkProxy"; isReadonly: true; isPointer: true }
        Signal {
            name: "urlChanged"
            Parameter { type: "string" }
        }
        Method {
            name: "setUrl"
            Parameter { name: "newUrl"; type: "string" }
        }
        Method {
            name: "setActive"
            Parameter { name: "isActive"; type: "bool" }
        }
        Method {
            name: "setBroken"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "setPreviewImageUrl"
            Parameter { name: "previewImageUrl"; type: "string" }
        }
        Method { name: "getPreviewImageUrlForSave"; type: "string" }
        Method { name: "openKnownIssue" }
    }
    Component {
        name: "MellowPlayer::Presentation::IStreamingServicesViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        Property {
            name: "filteredServices"
            type: "StreamingServiceProxyListModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "currentService"; type: "IStreamingServiceViewModel"; isPointer: true }
        Property { name: "currentServiceName"; type: "string"; isReadonly: true }
        Signal {
            name: "serviceCreated"
            Parameter { name: "directory"; type: "string" }
        }
        Method { name: "reload" }
        Method { name: "next" }
        Method { name: "previous" }
        Method {
            name: "setCurrentService"
            Parameter { name: "value"; type: "IStreamingServiceViewModel"; isPointer: true }
        }
        Method {
            name: "createService"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "serviceUrl"; type: "string" }
            Parameter { name: "authorName"; type: "string" }
            Parameter { name: "authorWebsite"; type: "string" }
            Parameter { name: "allPlatforms"; type: "bool" }
            Parameter { name: "linuxPlatform"; type: "bool" }
            Parameter { name: "appImagePlatform"; type: "bool" }
            Parameter { name: "osxPlatform"; type: "bool" }
            Parameter { name: "windowsPlatform"; type: "bool" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::IUserScriptsViewModel"
        prototype: "QObject"
        exports: ["IUserScriptsViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "hasScripts"; type: "bool"; isReadonly: true }
        Property { name: "model"; type: "QQmlObjectListModelBase"; isReadonly: true; isPointer: true }
        Method {
            name: "generateUniqueName"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "isValidName"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "add"
            type: "bool"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "sourcePath"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::ListeningHistoryViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["ListeningHistoryViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Method {
            name: "disableService"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "disable"; type: "bool" }
        }
        Method {
            name: "setSearchFilter"
            Parameter { name: "searchFilter"; type: "string" }
        }
        Method {
            name: "removeById"
            Parameter { name: "entryId"; type: "int" }
        }
        Method {
            name: "removeByDateCategory"
            Parameter { name: "dateCategory"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::MainWindowViewModel"
        prototype: "MellowPlayer::Presentation::IMainWindow"
        exports: ["MainWindowViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "visible"; type: "bool" }
        Property { name: "zoom"; type: "ZoomViewModel"; isReadonly: true; isPointer: true }
        Property { name: "fullScreen"; type: "bool" }
        Property {
            name: "runningServices"
            type: "RunningServicesViewModel"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "quitRequest" }
        Signal { name: "raiseRequested" }
        Signal { name: "forceQuitRequest" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setFullScreen"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "requestQuit" }
    }
    Component {
        name: "MellowPlayer::Presentation::NullStreamingServiceViewModel"
        prototype: "MellowPlayer::Presentation::IStreamingServiceViewModel"
        exports: ["NullStreamingServiceViewModel 3.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "MellowPlayer::Presentation::NullUserScriptsViewModel"
        prototype: "MellowPlayer::Presentation::IUserScriptsViewModel"
    }
    Component {
        name: "MellowPlayer::Presentation::QmlSingleton"
        prototype: "QObject"
        Property { name: "instance"; type: "QObject"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "MellowPlayer::Presentation::RemoteControlApplicationInfoViewModel"
        prototype: "QObject"
        exports: ["RemoteControlApplicationInfoViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "homePage"; type: "string"; isReadonly: true }
        Property { name: "logo"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "minimumRequiredVersion"; type: "string"; isReadonly: true }
        Property { name: "version"; type: "string"; isReadonly: true }
    }
    Component {
        name: "MellowPlayer::Presentation::RemoteControlErrorViewModel"
        prototype: "QObject"
        exports: ["RemoteControlErrorViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "message"; type: "string"; isReadonly: true }
    }
    Component {
        name: "MellowPlayer::Presentation::RemoteControlViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["RemoteControlViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "states"; type: "QAbstractListModel"; isReadonly: true; isPointer: true }
        Property {
            name: "appInfo"
            type: "RemoteControlApplicationInfoViewModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "currentStateIndex"; type: "int"; isReadonly: true }
        Property { name: "autoStartEnabled"; type: "bool" }
        Property { name: "error"; type: "RemoteControlErrorViewModel"; isReadonly: true; isPointer: true }
        Method { name: "activate" }
        Method { name: "deactivate" }
        Method { name: "install" }
        Method { name: "start" }
        Method { name: "stop" }
    }
    Component {
        name: "MellowPlayer::Presentation::RunningServicesViewModel"
        prototype: "QObject"
        exports: ["RunningServicesViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
        Property { name: "model"; type: "StreamingServiceListModel"; isReadonly: true; isPointer: true }
        Method {
            name: "remove"
            Parameter { name: "item"; type: "IStreamingServiceViewModel"; isPointer: true }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::ScalingFactorSettingViewModel"
        prototype: "MellowPlayer::Presentation::SettingViewModel"
        exports: ["ScalingFactorSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "minValue"; type: "int"; isReadonly: true }
        Property { name: "maxValue"; type: "int"; isReadonly: true }
        Property { name: "step"; type: "int"; isReadonly: true }
        Property { name: "suffix"; type: "string"; isReadonly: true }
    }
    Component {
        name: "MellowPlayer::Presentation::SettingViewModel"
        prototype: "QObject"
        exports: ["SettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "toolTip"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "qmlComponent"; type: "string"; isReadonly: true }
        Property { name: "isEnabled"; type: "bool"; isReadonly: true }
        Property { name: "instance"; type: "SettingViewModel"; isReadonly: true; isPointer: true }
        Property { name: "value"; type: "QVariant" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::SettingsCategoryViewModel"
        prototype: "QObject"
        exports: ["SettingsCategoryViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "qmlComponent"; type: "string"; isReadonly: true }
        Property { name: "settings"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Method { name: "restoreDefaults" }
    }
    Component {
        name: "MellowPlayer::Presentation::SettingsViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["SettingsViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "categories"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Method {
            name: "get"
            type: "SettingViewModel*"
            Parameter { name: "key"; type: "int" }
        }
        Method { name: "restoreDefaults" }
        Method {
            name: "restoreCategoryDefaults"
            Parameter { name: "category"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::ShortcutSettingViewModel"
        prototype: "MellowPlayer::Presentation::SettingViewModel"
        exports: ["ShortcutSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "keySequenceToString"
            type: "string"
            Parameter { name: "key"; type: "int" }
            Parameter { name: "modifiers"; type: "int" }
        }
        Method {
            name: "isValidKeySequence"
            type: "bool"
            Parameter { name: "key"; type: "int" }
            Parameter { name: "modifiers"; type: "int" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::StreamingServiceProxyListModel"
        prototype: "QSortFilterProxyModel"
        exports: ["StreamingServiceProxyListModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "update" }
        Method {
            name: "setSearchText"
            Parameter { name: "searchText"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::StreamingServicesViewModel"
        prototype: "MellowPlayer::Presentation::IStreamingServicesViewModel"
        exports: ["StreamingServicesViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "serviceCreated"
            Parameter { name: "directory"; type: "string" }
        }
        Method { name: "reload" }
        Method { name: "next" }
        Method { name: "previous" }
        Method {
            name: "setCurrentService"
            Parameter { name: "value"; type: "IStreamingServiceViewModel"; isPointer: true }
        }
        Method {
            name: "createService"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "serviceUrl"; type: "string" }
            Parameter { name: "authorName"; type: "string" }
            Parameter { name: "authorWebsite"; type: "string" }
            Parameter { name: "allPlatforms"; type: "bool" }
            Parameter { name: "linuxPlatform"; type: "bool" }
            Parameter { name: "appImagePlatform"; type: "bool" }
            Parameter { name: "osxPlatform"; type: "bool" }
            Parameter { name: "windowsPlatform"; type: "bool" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::ThemeViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["ThemeViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "dark"; type: "bool"; isReadonly: true }
        Property { name: "accent"; type: "string"; isReadonly: true }
        Property { name: "background"; type: "string"; isReadonly: true }
        Property { name: "foreground"; type: "string"; isReadonly: true }
        Property { name: "primary"; type: "string"; isReadonly: true }
        Property { name: "primaryForeground"; type: "string"; isReadonly: true }
        Property { name: "secondary"; type: "string"; isReadonly: true }
        Property { name: "secondaryForeground"; type: "string"; isReadonly: true }
        Signal { name: "isDarkChanged" }
        Method {
            name: "colorScaleFactor"
            type: "double"
            Parameter { name: "color"; type: "string" }
        }
        Method {
            name: "isDark"
            type: "bool"
            Parameter { name: "color"; type: "string" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::TimeLimitSettingViewModel"
        prototype: "MellowPlayer::Presentation::EnumSettingViewModel"
        exports: ["TimeLimitSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "values"; type: "QStringList"; isReadonly: true }
        Signal { name: "valueChanged" }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::UpdateChannelSettingViewModel"
        prototype: "MellowPlayer::Presentation::EnumSettingViewModel"
        exports: ["UpdateChannelSettingViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "values"; type: "QStringList"; isReadonly: true }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "MellowPlayer::Presentation::UpdaterViewModel"
        prototype: "MellowPlayer::Presentation::QmlSingleton"
        exports: ["UpdaterViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "string"; isReadonly: true }
        Property { name: "status"; type: "string"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "visible"; type: "bool"; isReadonly: true }
        Property { name: "installEnabled"; type: "bool"; isReadonly: true }
        Property { name: "restartEnabled"; type: "bool"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Method { name: "close" }
        Method { name: "check" }
        Method { name: "install" }
        Method { name: "restart" }
    }
    Component {
        name: "MellowPlayer::Presentation::ZoomViewModel"
        prototype: "QObject"
        exports: ["ZoomViewModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "double" }
        Method { name: "increment" }
        Method { name: "decrement" }
        Method { name: "reset" }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QQmlObjectListModelBase"
        prototype: "QAbstractListModel"
        exports: [
            "QQmlObjectListModelBase 3.0",
            "SettingListModel 3.0",
            "StreamingServiceListModel 3.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0, 0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "size"; type: "int" }
        Method { name: "count"; type: "int" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "roleForName"
            type: "int"
            Parameter { name: "name"; type: "QByteArray" }
        }
        Method { name: "clear" }
        Method {
            name: "append"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "prepend"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "insert"
            Parameter { name: "idx"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "move"
            Parameter { name: "idx"; type: "int" }
            Parameter { name: "pos"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "remove"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "uid"; type: "string" }
        }
        Method { name: "getFirst"; type: "QObject*" }
        Method { name: "getLast"; type: "QObject*" }
        Method { name: "toVarArray"; type: "QVariantList" }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        exports: ["ListeningHistoryProxyListModel 3.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterRegularExpression"; type: "QRegularExpression" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Signal {
            name: "dynamicSortFilterChanged"
            Parameter { name: "dynamicSortFilter"; type: "bool" }
        }
        Signal {
            name: "filterCaseSensitivityChanged"
            Parameter { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortCaseSensitivityChanged"
            Parameter { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        }
        Signal {
            name: "sortLocaleAwareChanged"
            Parameter { name: "sortLocaleAware"; type: "bool" }
        }
        Signal {
            name: "sortRoleChanged"
            Parameter { name: "sortRole"; type: "int" }
        }
        Signal {
            name: "filterRoleChanged"
            Parameter { name: "filterRole"; type: "int" }
        }
        Signal {
            name: "recursiveFilteringEnabledChanged"
            Parameter { name: "recursiveFilteringEnabled"; type: "bool" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "regExp"; type: "QRegExp" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterRegularExpression"
            Parameter { name: "regularExpression"; type: "QRegularExpression" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
